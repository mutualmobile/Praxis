// Manifest version information!
def versionMajor = 0
def versionMinor = 0
def versionPatch = 1
def versionBuild = 0

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: 'variants.gradle'

def preDexEnabled = "true" == System.getProperty("pre-dex", "true")

android {
  compileSdkVersion compileSdk
  defaultConfig {
    applicationId "com.mutualmobile.praxis"

    minSdkVersion minSdk
    targetSdkVersion targetSdk

    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    vectorDrawables.useSupportLibrary = true
  }

  packagingOptions {
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    exclude 'LICENSE.txt'
  }

  dexOptions {
    preDexLibraries = preDexEnabled
  }

  androidExtensions {
    experimental = true
  }

  dataBinding {
    enabled = true
  }

  lintOptions {
    lintConfig file('../analysis/lint/lint.xml')
    htmlOutput file("$project.buildDir/reports/lint/lint-reports.html")
    xmlOutput file("$project.buildDir/reports/lint/lint-reports.xml")
    abortOnError false
  }
}

// Required for annotation processing plugins like Dagger
kapt {
  generateStubs = true
}

dependencies {

  implementation project(':networkmodule')

  // Kotlin
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"

  implementation 'androidx.legacy:legacy-support-v4:1.0.0'
  implementation 'androidx.appcompat:appcompat:1.1.0'
  implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta3'
  implementation 'com.google.android.material:material:1.2.0-alpha01'

  // Dagger 2
  implementation "com.google.dagger:dagger:$daggerVersion"
  implementation "com.google.dagger:dagger-android-support:$daggerVersion"
  kapt "com.google.dagger:dagger-compiler:$daggerVersion"
  kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

  // Retrofit 2
  implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
  implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
  implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
  implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
  implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

  //Rx
  implementation "io.reactivex.rxjava2:rxjava:$rxVersion"
  implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
  implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar'

  // Timber
  implementation 'com.jakewharton.timber:timber:4.7.1'

  implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
  kapt "androidx.lifecycle:lifecycle-compiler:$lifecycleVersion"
  implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycleVersion"
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"

  // UI Testing
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

  // Unit Testing
  testImplementation 'junit:junit:4.12'
  testImplementation "androidx.arch.core:core-testing:$archTestingVersion"
  testImplementation 'org.robolectric:robolectric:4.3'
  testImplementation "com.google.dagger:dagger:$daggerVersion"
  testImplementation "com.google.dagger:dagger-android-support:$daggerVersion"
  kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"
  kaptTest "com.google.dagger:dagger-android-processor:$daggerVersion"
  testImplementation "androidx.test:core:1.0.0"

}

